# JMH version: 1.35
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-58
# VM invoker: C:\Program Files\Java\OpenJDK-21\bin\java.exe
# VM options: -javaagent:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\lib\idea_rt.jar=62355:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.matrix.benchmark.BenchmarkMatrix.testLoop
# Parameters: (size = 1024)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 3621.960 ms/op
# Warmup Iteration   2: 2900.991 ms/op
# Warmup Iteration   3: 4217.698 ms/op
# Warmup Iteration   4: 5764.012 ms/op
# Warmup Iteration   5: 4710.829 ms/op
Iteration   1: 4238.479 ms/op
                 ·gc.alloc.rate:      1.820 MB/sec
                 ·gc.alloc.rate.norm: 8409250.667 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   2: 3573.493 ms/op
                 ·gc.alloc.rate:      2.139 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   3: 3751.296 ms/op
                 ·gc.alloc.rate:      2.047 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   4: 2941.767 ms/op
                 ·gc.alloc.rate:      2.612 MB/sec
                 ·gc.alloc.rate.norm: 8409206.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   5: 3204.240 ms/op
                 ·gc.alloc.rate:      2.408 MB/sec
                 ·gc.alloc.rate.norm: 8409206.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>



Result "org.matrix.benchmark.BenchmarkMatrix.testLoop":
  3541.855 ±(99.9%) 1929.401 ms/op [Average]
  (min, avg, max) = (2941.767, 3541.855, 4238.479), stdev = 501.059
  CI (99.9%): [1612.454, 5471.256] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testLoop:·gc.alloc.rate":
  2.205 ±(99.9%) 1.194 MB/sec [Average]
  (min, avg, max) = (1.820, 2.205, 2.612), stdev = 0.310
  CI (99.9%): [1.011, 3.400] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testLoop:·gc.alloc.rate.norm":
  8409228.533 ±(99.9%) 80.963 B/op [Average]
  (min, avg, max) = (8409206.000, 8409228.533, 8409250.667), stdev = 21.026
  CI (99.9%): [8409147.570, 8409309.497] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testLoop:·gc.count":
  ≈ 0 counts

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testLoop:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 75.0%         RUNNABLE
 25.0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25.0%  33.3% sun.nio.ch.SocketDispatcher.read0
 25.0%  33.3% <stack is empty, everything is filtered?>
 25.0%  33.3% org.matrix.LoopUnrollingMatrixMultiplication.multiply
  0.0%   0.0% java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock
  0.0%   0.0% jdk.internal.misc.Unsafe.putReferenceVolatile

....[Thread state: TIMED_WAITING]...................................................................
 25.0% 100.0% jdk.internal.misc.Unsafe.park



# JMH version: 1.35
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-58
# VM invoker: C:\Program Files\Java\OpenJDK-21\bin\java.exe
# VM options: -javaagent:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\lib\idea_rt.jar=62355:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.matrix.benchmark.BenchmarkMatrix.testNaive
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 00:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 3397.697 ms/op
# Warmup Iteration   2: 3829.002 ms/op
# Warmup Iteration   3: 3770.467 ms/op
# Warmup Iteration   4: 4618.100 ms/op
# Warmup Iteration   5: 5382.730 ms/op
Iteration   1: 3900.737 ms/op
                 ·gc.alloc.rate:      1.971 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   2: 3546.185 ms/op
                 ·gc.alloc.rate:      2.160 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   3: 3544.001 ms/op
                 ·gc.alloc.rate:      2.154 MB/sec
                 ·gc.alloc.rate.norm: 8409250.667 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   4: 4109.890 ms/op
                 ·gc.alloc.rate:      1.875 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>

Iteration   5: 4683.355 ms/op
                 ·gc.alloc.rate:      1.653 MB/sec
                 ·gc.alloc.rate.norm: 8409240.000 B/op
                 ·gc.count:           ≈ 0 counts
                 ·stack:              <delayed till summary>



Result "org.matrix.benchmark.BenchmarkMatrix.testNaive":
  3956.834 ±(99.9%) 1819.882 ms/op [Average]
  (min, avg, max) = (3544.001, 3956.834, 4683.355), stdev = 472.618
  CI (99.9%): [2136.951, 5776.716] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testNaive:·gc.alloc.rate":
  1.962 ±(99.9%) 0.815 MB/sec [Average]
  (min, avg, max) = (1.653, 1.962, 2.160), stdev = 0.212
  CI (99.9%): [1.147, 2.778] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testNaive:·gc.alloc.rate.norm":
  8409242.133 ±(99.9%) 18.369 B/op [Average]
  (min, avg, max) = (8409240.000, 8409242.133, 8409250.667), stdev = 4.770
  CI (99.9%): [8409223.765, 8409260.502] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testNaive:·gc.count":
  ≈ 0 counts

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testNaive:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 75.0%         RUNNABLE
 25.0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25.0%  33.3% <stack is empty, everything is filtered?>
 25.0%  33.3% org.matrix.NaiveMatrixMultiplication.multiply
 25.0%  33.3% sun.nio.ch.SocketDispatcher.read0
  0.0%   0.0% jdk.internal.misc.Unsafe.putReferenceVolatile

....[Thread state: TIMED_WAITING]...................................................................
 25.0% 100.0% jdk.internal.misc.Unsafe.park



# JMH version: 1.35
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-58
# VM invoker: C:\Program Files\Java\OpenJDK-21\bin\java.exe
# VM options: -javaagent:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\lib\idea_rt.jar=62355:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.matrix.benchmark.BenchmarkMatrix.testStrassen
# Parameters: (size = 1024)

# Run progress: 66.67% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 2230.375 ms/op
# Warmup Iteration   2: 1603.378 ms/op
# Warmup Iteration   3: 1631.636 ms/op
# Warmup Iteration   4: 1728.127 ms/op
# Warmup Iteration   5: 1355.406 ms/op
Iteration   1: 1305.016 ms/op
                 ·gc.alloc.rate:                   616.155 MB/sec
                 ·gc.alloc.rate.norm:              883758580.000 B/op
                 ·gc.churn.G1_Eden_Space:          620.309 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     889716736.000 B/op
                 ·gc.churn.G1_Survivor_Space:      4.729 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 6782436.000 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         42.000 ms
                 ·stack:                           <delayed till summary>

Iteration   2: 1670.359 ms/op
                 ·gc.alloc.rate:                   483.793 MB/sec
                 ·gc.alloc.rate.norm:              883755120.000 B/op
                 ·gc.churn.G1_Eden_Space:          465.121 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     849646153.143 B/op
                 ·gc.churn.G1_Survivor_Space:      4.768 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 8710217.143 B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         38.000 ms
                 ·stack:                           <delayed till summary>

Iteration   3: 1576.185 ms/op
                 ·gc.alloc.rate:                   511.402 MB/sec
                 ·gc.alloc.rate.norm:              883757217.143 B/op
                 ·gc.churn.G1_Eden_Space:          541.592 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     935928978.286 B/op
                 ·gc.churn.G1_Survivor_Space:      2.885 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 4984730.286 B/op
                 ·gc.count:                        11.000 counts
                 ·gc.time:                         45.000 ms
                 ·stack:                           <delayed till summary>

Iteration   4: 1357.763 ms/op
                 ·gc.alloc.rate:                   592.879 MB/sec
                 ·gc.alloc.rate.norm:              883754920.000 B/op
                 ·gc.churn.G1_Eden_Space:          596.527 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     889192448.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.594 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 885424.000 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         43.000 ms
                 ·stack:                           <delayed till summary>

Iteration   5: 1263.183 ms/op
                 ·gc.alloc.rate:                   638.632 MB/sec
                 ·gc.alloc.rate.norm:              883753521.778 B/op
                 ·gc.churn.G1_Eden_Space:          616.968 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     853773880.889 B/op
                 ·gc.churn.G1_Survivor_Space:      1.674 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2317004.444 B/op
                 ·gc.count:                        13.000 counts
                 ·gc.time:                         45.000 ms
                 ·stack:                           <delayed till summary>



Result "org.matrix.benchmark.BenchmarkMatrix.testStrassen":
  1434.501 ±(99.9%) 688.040 ms/op [Average]
  (min, avg, max) = (1263.183, 1434.501, 1670.359), stdev = 178.682
  CI (99.9%): [746.461, 2122.541] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate":
  568.572 ±(99.9%) 259.878 MB/sec [Average]
  (min, avg, max) = (483.793, 568.572, 638.632), stdev = 67.489
  CI (99.9%): [308.694, 828.450] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm":
  883755871.784 ±(99.9%) 7734.434 B/op [Average]
  (min, avg, max) = (883753521.778, 883755871.784, 883758580.000), stdev = 2008.608
  CI (99.9%): [883748137.350, 883763606.219] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space":
  568.103 ±(99.9%) 252.719 MB/sec [Average]
  (min, avg, max) = (465.121, 568.103, 620.309), stdev = 65.630
  CI (99.9%): [315.385, 820.822] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm":
  883651639.263 ±(99.9%) 134075690.149 B/op [Average]
  (min, avg, max) = (849646153.143, 883651639.263, 935928978.286), stdev = 34819030.956
  CI (99.9%): [749575949.114, 1017727329.413] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space":
  2.930 ±(99.9%) 7.113 MB/sec [Average]
  (min, avg, max) = (0.594, 2.930, 4.768), stdev = 1.847
  CI (99.9%): [≈ 0, 10.043] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm":
  4735962.375 ±(99.9%) 12286306.608 B/op [Average]
  (min, avg, max) = (885424.000, 4735962.375, 8710217.143), stdev = 3190714.809
  CI (99.9%): [≈ 0, 17022268.983] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.count":
  58.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 11.600, 13.000), stdev = 1.140
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.time":
  213.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (38.000, 42.600, 45.000), stdev = 2.881
  CI (99.9%): [213.000, 213.000] (assumes normal distribution)

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 75.0%         RUNNABLE
 25.0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25.0%  33.3% sun.nio.ch.SocketDispatcher.read0
 24.9%  33.2% <stack is empty, everything is filtered?>
 21.7%  29.0% org.matrix.NaiveMatrixMultiplication.multiply
  1.1%   1.5% org.matrix.StrassenMatrixMultiplication.addMatrix
  0.9%   1.2% org.matrix.StrassenMatrixMultiplication.multiply
  0.7%   0.9% org.matrix.StrassenMatrixMultiplication.subtractMatrix
  0.3%   0.4% org.matrix.StrassenMatrixMultiplication.splitMatrix
  0.2%   0.3% org.matrix.StrassenMatrixMultiplication.mergeMatrix
  0.0%   0.0% java.lang.Object.clone
  0.0%   0.0% com.sun.management.internal.GcInfoBuilder.getPoolNames
  0.1%   0.1% <other>

....[Thread state: TIMED_WAITING]...................................................................
 25.0% 100.0% jdk.internal.misc.Unsafe.park



# Run complete. Total time: 00:06:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                      (size)  Mode  Cnt          Score           Error   Units
BenchmarkMatrix.testLoop                                         1024  avgt    5       3541.855 ±      1929.401   ms/op
BenchmarkMatrix.testLoop:·gc.alloc.rate                          1024  avgt    5          2.205 ±         1.194  MB/sec
BenchmarkMatrix.testLoop:·gc.alloc.rate.norm                     1024  avgt    5    8409228.533 ±        80.963    B/op
BenchmarkMatrix.testLoop:·gc.count                               1024  avgt    5            ≈ 0                  counts
BenchmarkMatrix.testLoop:·stack                                  1024  avgt                 NaN                     ---
BenchmarkMatrix.testNaive                                        1024  avgt    5       3956.834 ±      1819.882   ms/op
BenchmarkMatrix.testNaive:·gc.alloc.rate                         1024  avgt    5          1.962 ±         0.815  MB/sec
BenchmarkMatrix.testNaive:·gc.alloc.rate.norm                    1024  avgt    5    8409242.133 ±        18.369    B/op
BenchmarkMatrix.testNaive:·gc.count                              1024  avgt    5            ≈ 0                  counts
BenchmarkMatrix.testNaive:·stack                                 1024  avgt                 NaN                     ---
BenchmarkMatrix.testStrassen                                     1024  avgt    5       1434.501 ±       688.040   ms/op
BenchmarkMatrix.testStrassen:·gc.alloc.rate                      1024  avgt    5        568.572 ±       259.878  MB/sec
BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm                 1024  avgt    5  883755871.784 ±      7734.434    B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space             1024  avgt    5        568.103 ±       252.719  MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm        1024  avgt    5  883651639.263 ± 134075690.149    B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space         1024  avgt    5          2.930 ±         7.113  MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm    1024  avgt    5    4735962.375 ±  12286306.608    B/op
BenchmarkMatrix.testStrassen:·gc.count                           1024  avgt    5         58.000                  counts
BenchmarkMatrix.testStrassen:·gc.time                            1024  avgt    5        213.000                      ms
BenchmarkMatrix.testStrassen:·stack                              1024  avgt                 NaN                     ---
