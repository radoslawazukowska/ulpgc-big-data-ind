# JMH version: 1.35
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-58
# VM invoker: C:\Program Files\Java\OpenJDK-21\bin\java.exe
# VM options: -javaagent:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\lib\idea_rt.jar=62725:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.matrix.benchmark.BenchmarkMatrix.testStrassen
# Parameters: (size = 5000)

# Run progress: 0.00% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 126812.580 ms/op
Iteration   1: 113655.510 ms/op
                 ·gc.alloc.rate:                        569.393 MB/sec
                 ·gc.alloc.rate.norm:                   68159573624.000 B/op
                 ·gc.churn.Compressed_Class_Space:      ≈ 10⁻⁵ MB/sec
                 ·gc.churn.Compressed_Class_Space.norm: 512.000 B/op
                 ·gc.churn.G1_Eden_Space:               578.064 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:          69197627392.000 B/op
                 ·gc.churn.G1_Old_Gen:                  12.136 MB/sec
                 ·gc.churn.G1_Old_Gen.norm:             1452747056.000 B/op
                 ·gc.churn.G1_Survivor_Space:           10.817 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm:      1294809336.000 B/op
                 ·gc.churn.Metaspace:                   ≈ 10⁻⁵ MB/sec
                 ·gc.churn.Metaspace.norm:              1688.000 B/op
                 ·gc.count:                             28.000 counts
                 ·gc.time:                              913.000 ms
                 ·stack:                                <delayed till summary>



Result "org.matrix.benchmark.BenchmarkMatrix.testStrassen":
  113655.510 ms/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate":
  569.393 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm":
  68159573624.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.Compressed_Class_Space":
  ≈ 10⁻⁵ MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.Compressed_Class_Space.norm":
  512.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space":
  578.064 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm":
  69197627392.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Old_Gen":
  12.136 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Old_Gen.norm":
  1452747056.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space":
  10.817 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm":
  1294809336.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.Metaspace":
  ≈ 10⁻⁵ MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.Metaspace.norm":
  1688.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.count":
  28.000 counts

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.time":
  913.000 ms

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 75.0%         RUNNABLE
 25.0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25.0%  33.3% sun.nio.ch.SocketDispatcher.read0
 25.0%  33.3% <stack is empty, everything is filtered?>
 21.5%  28.7% org.matrix.NaiveMatrixMultiplication.multiply
  1.2%   1.6% org.matrix.StrassenMatrixMultiplication.addMatrix
  0.9%   1.2% org.matrix.StrassenMatrixMultiplication.multiply
  0.7%   0.9% org.matrix.StrassenMatrixMultiplication.subtractMatrix
  0.5%   0.6% org.matrix.StrassenMatrixMultiplication.splitMatrix
  0.2%   0.2% org.matrix.StrassenMatrixMultiplication.mergeMatrix
  0.0%   0.0% com.sun.management.internal.GarbageCollectorExtImpl.getGcInfoBuilder
  0.0%   0.0% java.lang.Object.clone

....[Thread state: TIMED_WAITING]...................................................................
 25.0% 100.0% jdk.internal.misc.Unsafe.park



# Run complete. Total time: 00:04:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                           (size)  Mode  Cnt            Score   Error   Units
BenchmarkMatrix.testStrassen                                          5000  avgt            113655.510           ms/op
BenchmarkMatrix.testStrassen:·gc.alloc.rate                           5000  avgt               569.393          MB/sec
BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm                      5000  avgt       68159573624.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.Compressed_Class_Space         5000  avgt                ≈ 10⁻⁵          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.Compressed_Class_Space.norm    5000  avgt               512.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space                  5000  avgt               578.064          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm             5000  avgt       69197627392.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Old_Gen                     5000  avgt                12.136          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Old_Gen.norm                5000  avgt        1452747056.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space              5000  avgt                10.817          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm         5000  avgt        1294809336.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.Metaspace                      5000  avgt                ≈ 10⁻⁵          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.Metaspace.norm                 5000  avgt              1688.000            B/op
BenchmarkMatrix.testStrassen:·gc.count                                5000  avgt                28.000          counts
BenchmarkMatrix.testStrassen:·gc.time                                 5000  avgt               913.000              ms
BenchmarkMatrix.testStrassen:·stack                                   5000  avgt                   NaN             ---
