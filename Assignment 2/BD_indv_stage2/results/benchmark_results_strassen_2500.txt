# JMH version: 1.35
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-58
# VM invoker: C:\Program Files\Java\OpenJDK-21\bin\java.exe
# VM options: -javaagent:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\lib\idea_rt.jar=62663:C:\Users\Radka\AppData\Local\JetBrains\IntelliJ IDEA 2024.2.3\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.matrix.benchmark.BenchmarkMatrix.testStrassen
# Parameters: (size = 2500)

# Run progress: 0.00% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 28006.757 ms/op
Iteration   1: 25315.429 ms/op
                 ·gc.alloc.rate:                   351.660 MB/sec
                 ·gc.alloc.rate.norm:              9522594384.000 B/op
                 ·gc.churn.G1_Eden_Space:          365.544 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     9898557440.000 B/op
                 ·gc.churn.G1_Survivor_Space:      5.142 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 139238688.000 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         245.000 ms
                 ·stack:                           <delayed till summary>



Result "org.matrix.benchmark.BenchmarkMatrix.testStrassen":
  25315.429 ms/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate":
  351.660 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm":
  9522594384.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space":
  365.544 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm":
  9898557440.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space":
  5.142 MB/sec

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm":
  139238688.000 B/op

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.count":
  4.000 counts

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·gc.time":
  245.000 ms

Secondary result "org.matrix.benchmark.BenchmarkMatrix.testStrassen:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 75.0%         RUNNABLE
 25.0%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 25.0%  33.3% sun.nio.ch.SocketDispatcher.read0
 24.9%  33.3% <stack is empty, everything is filtered?>
 22.2%  29.6% org.matrix.NaiveMatrixMultiplication.multiply
  0.9%   1.2% org.matrix.StrassenMatrixMultiplication.addMatrix
  0.7%   1.0% org.matrix.StrassenMatrixMultiplication.multiply
  0.7%   0.9% org.matrix.StrassenMatrixMultiplication.subtractMatrix
  0.3%   0.4% org.matrix.StrassenMatrixMultiplication.splitMatrix
  0.2%   0.2% org.matrix.StrassenMatrixMultiplication.mergeMatrix
  0.0%   0.0% java.util.TreeMap.get
  0.0%   0.0% javax.management.openmbean.TabularType.isAssignableFrom

....[Thread state: TIMED_WAITING]...................................................................
 25.0% 100.0% jdk.internal.misc.Unsafe.park



# Run complete. Total time: 00:00:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                      (size)  Mode  Cnt           Score   Error   Units
BenchmarkMatrix.testStrassen                                     2500  avgt            25315.429           ms/op
BenchmarkMatrix.testStrassen:·gc.alloc.rate                      2500  avgt              351.660          MB/sec
BenchmarkMatrix.testStrassen:·gc.alloc.rate.norm                 2500  avgt       9522594384.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space             2500  avgt              365.544          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Eden_Space.norm        2500  avgt       9898557440.000            B/op
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space         2500  avgt                5.142          MB/sec
BenchmarkMatrix.testStrassen:·gc.churn.G1_Survivor_Space.norm    2500  avgt        139238688.000            B/op
BenchmarkMatrix.testStrassen:·gc.count                           2500  avgt                4.000          counts
BenchmarkMatrix.testStrassen:·gc.time                            2500  avgt              245.000              ms
BenchmarkMatrix.testStrassen:·stack                              2500  avgt                  NaN             ---
